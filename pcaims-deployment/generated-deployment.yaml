---
# Source: pcaims-app/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ghcr-secret
  labels:
    helm.sh/chart: pcaims-app-0.1.0
    app.kubernetes.io/name: pcaims-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJnaGNyLmlvIjp7InVzZXJuYW1lIjoiIiwicGFzc3dvcmQiOiIiLCJhdXRoIjoiT2c9PSJ9fX0=
---
# Source: pcaims-app/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-pcaims-app-mysql-init
  labels:
    helm.sh/chart: pcaims-app-0.1.0
    app.kubernetes.io/name: pcaims-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mysql
data:
  01-init.sql: |
    -- Initialize database with tables and sample data for Inventory Management System

    -- Create tables
    CREATE TABLE IF NOT EXISTS users (
        id INT AUTO_INCREMENT PRIMARY KEY,
        username VARCHAR(50) UNIQUE NOT NULL,
        email VARCHAR(100) UNIQUE NOT NULL,
        hashed_password VARCHAR(255) NOT NULL,
        full_name VARCHAR(100) NOT NULL,
        role ENUM('admin', 'manager', 'staff') DEFAULT 'staff',
        is_active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        INDEX idx_username (username),
        INDEX idx_email (email)
    );

    CREATE TABLE IF NOT EXISTS categories (
        id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(100) UNIQUE NOT NULL,
        description TEXT,
        parent_id INT,
        is_active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (parent_id) REFERENCES categories(id)
    );

    CREATE TABLE IF NOT EXISTS products (
        id INT AUTO_INCREMENT PRIMARY KEY,
        sku VARCHAR(50) UNIQUE NOT NULL,
        name VARCHAR(200) NOT NULL,
        description TEXT,
        price DECIMAL(10,2) NOT NULL,
        cost_price DECIMAL(10,2) NOT NULL,
        category_id INT NOT NULL,
        brand VARCHAR(100),
        model VARCHAR(100),
        weight DECIMAL(8,2),
        dimensions VARCHAR(100),
        status ENUM('active', 'inactive', 'discontinued') DEFAULT 'active',
        min_stock_level INT DEFAULT 0,
        max_stock_level INT DEFAULT 1000,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (category_id) REFERENCES categories(id),
        INDEX idx_sku (sku)
    );

    CREATE TABLE IF NOT EXISTS inventory (
        id INT AUTO_INCREMENT PRIMARY KEY,
        product_id INT UNIQUE NOT NULL,
        current_stock INT DEFAULT 0 NOT NULL,
        reserved_stock INT DEFAULT 0 NOT NULL,
        available_stock INT DEFAULT 0 NOT NULL,
        last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (product_id) REFERENCES products(id)
    );

    CREATE TABLE IF NOT EXISTS suppliers (
        id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(200) NOT NULL,
        contact_person VARCHAR(100),
        email VARCHAR(100),
        phone VARCHAR(20),
        address TEXT,
        is_active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS customers (
        id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(200) NOT NULL,
        email VARCHAR(100) UNIQUE,
        phone VARCHAR(20),
        address TEXT,
        is_active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        INDEX idx_email (email)
    );

    CREATE TABLE IF NOT EXISTS orders (
        id INT AUTO_INCREMENT PRIMARY KEY,
        order_number VARCHAR(50) UNIQUE NOT NULL,
        customer_id INT NOT NULL,
        user_id INT NOT NULL,
        status ENUM('pending', 'confirmed', 'shipped', 'delivered', 'cancelled') DEFAULT 'pending',
        total_amount DECIMAL(10,2) NOT NULL,
        notes TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (customer_id) REFERENCES customers(id),
        FOREIGN KEY (user_id) REFERENCES users(id),
        INDEX idx_order_number (order_number)
    );

    CREATE TABLE IF NOT EXISTS order_items (
        id INT AUTO_INCREMENT PRIMARY KEY,
        order_id INT NOT NULL,
        product_id INT NOT NULL,
        quantity INT NOT NULL,
        unit_price DECIMAL(10,2) NOT NULL,
        total_price DECIMAL(10,2) NOT NULL,
        FOREIGN KEY (order_id) REFERENCES orders(id),
        FOREIGN KEY (product_id) REFERENCES products(id)
    );

    CREATE TABLE IF NOT EXISTS purchase_orders (
        id INT AUTO_INCREMENT PRIMARY KEY,
        po_number VARCHAR(50) UNIQUE NOT NULL,
        supplier_id INT NOT NULL,
        user_id INT NOT NULL,
        status ENUM('pending', 'confirmed', 'shipped', 'delivered', 'cancelled') DEFAULT 'pending',
        total_amount DECIMAL(10,2) NOT NULL,
        expected_delivery TIMESTAMP,
        notes TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (supplier_id) REFERENCES suppliers(id),
        FOREIGN KEY (user_id) REFERENCES users(id),
        INDEX idx_po_number (po_number)
    );

    CREATE TABLE IF NOT EXISTS purchase_order_items (
        id INT AUTO_INCREMENT PRIMARY KEY,
        purchase_order_id INT NOT NULL,
        product_id INT NOT NULL,
        quantity INT NOT NULL,
        unit_cost DECIMAL(10,2) NOT NULL,
        total_cost DECIMAL(10,2) NOT NULL,
        FOREIGN KEY (purchase_order_id) REFERENCES purchase_orders(id),
        FOREIGN KEY (product_id) REFERENCES products(id)
    );

    CREATE TABLE IF NOT EXISTS inventory_transactions (
        id INT AUTO_INCREMENT PRIMARY KEY,
        product_id INT NOT NULL,
        user_id INT NOT NULL,
        transaction_type ENUM('purchase', 'sale', 'return', 'adjustment') NOT NULL,
        quantity INT NOT NULL,
        previous_stock INT NOT NULL,
        new_stock INT NOT NULL,
        reference_id INT,
        reference_type VARCHAR(50),
        notes TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (product_id) REFERENCES products(id),
        FOREIGN KEY (user_id) REFERENCES users(id)
    );

    -- Insert sample data
    INSERT INTO categories (name, description, is_active) VALUES
    ('Electronics', 'Electronic devices and accessories', true),
    ('Clothing', 'Apparel and fashion items', true),
    ('Books', 'Books and publications', true),
    ('Home & Garden', 'Home improvement and garden supplies', true),
    ('Sports', 'Sports equipment and accessories', true),
    ('Toys', 'Toys and games', true);

    INSERT INTO users (username, email, hashed_password, full_name, role, is_active) VALUES
    ('admin', 'admin@inventory.com', '$2b$12$r3jyZoZ0qXQUyBAO28uWfe/eTw5dMCzr0NXHS8BMiyr/cFamOr3G6', 'System Administrator', 'admin', true),
    ('manager', 'manager@inventory.com', '$2b$12$pYPR1WFv9YemNt5Q67YR/OqGw3/Q4q1edilH.SQqT2AZrb/6XSJsa', 'Store Manager', 'manager', true),
    ('staff', 'staff@inventory.com', '$2b$12$5AwhD/I11LqBjbr6CPeuTuHzQ9tI4HOIYp2vexpFCVUPbh03b3yGm', 'Store Staff', 'staff', true);
---
# Source: pcaims-app/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: release-name-pcaims-app-mysql-pvc
  labels:
    helm.sh/chart: pcaims-app-0.1.0
    app.kubernetes.io/name: pcaims-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mysql
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
---
# Source: pcaims-app/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-pcaims-app-frontend
  labels:
    helm.sh/chart: pcaims-app-0.1.0
    app.kubernetes.io/name: pcaims-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
spec:
  type: ClusterIP
  ports:
    - port: 5000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: pcaims-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: frontend
---
# Source: pcaims-app/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-pcaims-app-backend
  labels:
    helm.sh/chart: pcaims-app-0.1.0
    app.kubernetes.io/name: pcaims-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
spec:
  type: ClusterIP
  ports:
    - port: 8000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: pcaims-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: backend
---
# Source: pcaims-app/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-pcaims-app-mysql
  labels:
    helm.sh/chart: pcaims-app-0.1.0
    app.kubernetes.io/name: pcaims-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mysql
spec:
  type: ClusterIP
  ports:
    - port: 3306
      targetPort: mysql
      protocol: TCP
      name: mysql
  selector:
    app.kubernetes.io/name: pcaims-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: mysql
---
# Source: pcaims-app/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-pcaims-app-frontend
  labels:
    helm.sh/chart: pcaims-app-0.1.0
    app.kubernetes.io/name: pcaims-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pcaims-app
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: frontend
  template:
    metadata:
      labels:
        helm.sh/chart: pcaims-app-0.1.0
        app.kubernetes.io/name: pcaims-app
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: frontend
    spec:
      imagePullSecrets:
        - name: ghcr-secret
      serviceAccountName: default
      containers:
        - name: frontend
          image: "ghcr.io/vinitchauhan/product-catalog-and-inventory-management-system-frontend:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          env:
            - name: FLASK_APP
              value: "app.py"
            - name: FLASK_ENV
              value: "production"
            - name: BACKEND_URL
              value: "http://release-name-pcaims-app-backend:8000"
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 256Mi
---
# Source: pcaims-app/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-pcaims-app-backend
  labels:
    helm.sh/chart: pcaims-app-0.1.0
    app.kubernetes.io/name: pcaims-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pcaims-app
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        helm.sh/chart: pcaims-app-0.1.0
        app.kubernetes.io/name: pcaims-app
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: backend
    spec:
      imagePullSecrets:
        - name: ghcr-secret
      serviceAccountName: default
      containers:
        - name: backend
          image: "ghcr.io/vinitchauhan/product-catalog-and-inventory-management-system-backend:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          env:
            - name: ACCESS_TOKEN_EXPIRE_MINUTES
              value: "30"
            - name: ALGORITHM
              value: "HS256"
            - name: DB_NAME
              value: "inventory_management"
            - name: DB_PASSWORD
              value: "rootpassword"
            - name: DB_PORT
              value: "3306"
            - name: DB_USER
              value: "root"
            - name: SECRET_KEY
              value: "your-secret-key-here-change-in-production"
            - name: DB_HOST
              value: "release-name-pcaims-app-mysql"
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 512Mi
---
# Source: pcaims-app/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-pcaims-app-mysql
  labels:
    helm.sh/chart: pcaims-app-0.1.0
    app.kubernetes.io/name: pcaims-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pcaims-app
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: mysql
  template:
    metadata:
      labels:
        helm.sh/chart: pcaims-app-0.1.0
        app.kubernetes.io/name: pcaims-app
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: mysql
    spec:
      imagePullSecrets:
        - name: ghcr-secret
      serviceAccountName: default
      containers:
        - name: mysql
          image: "mysql:8.0"
          imagePullPolicy: IfNotPresent
          ports:
            - name: mysql
              containerPort: 3306
              protocol: TCP
          env:
            - name: MYSQL_DATABASE
              value: "inventory_management"
            - name: MYSQL_PASSWORD
              value: "password"
            - name: MYSQL_ROOT_PASSWORD
              value: "rootpassword"
            - name: MYSQL_USER
              value: "user"
          livenessProbe:
            exec:
              command:
                - mysqladmin
                - ping
                - -h
                - localhost
                - -u
                - root
                - -p$(MYSQL_ROOT_PASSWORD)
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - mysqladmin
                - ping
                - -h
                - localhost
                - -u
                - root
                - -p$(MYSQL_ROOT_PASSWORD)
            initialDelaySeconds: 30
            periodSeconds: 5
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi
          volumeMounts:
            - name: mysql-data
              mountPath: /var/lib/mysql
            - name: mysql-init
              mountPath: /docker-entrypoint-initdb.d
              readOnly: true
      volumes:
        - name: mysql-data
          persistentVolumeClaim:
            claimName: release-name-pcaims-app-mysql-pvc
        - name: mysql-init
          configMap:
            name: release-name-pcaims-app-mysql-init
---
# Source: pcaims-app/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-pcaims-app
  labels:
    helm.sh/chart: pcaims-app-0.1.0
    app.kubernetes.io/name: pcaims-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  ingressClassName: nginx
  rules:
    - host: "pcaims.local"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: release-name-pcaims-app-frontend
                port:
                  number: 5000
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: release-name-pcaims-app-backend
                port:
                  number: 8000
---
# Source: pcaims-app/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-pcaims-app-test-connection"
  labels:
    helm.sh/chart: pcaims-app-0.1.0
    app.kubernetes.io/name: pcaims-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['release-name-pcaims-app-frontend:5000']
  restartPolicy: Never
---
# Source: pcaims-app/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-pcaims-app-test-backend"
  labels:
    helm.sh/chart: pcaims-app-0.1.0
    app.kubernetes.io/name: pcaims-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: curl
      image: curlimages/curl:latest
      command: ['curl']
      args: ['-f', 'release-name-pcaims-app-backend:8000/health']
  restartPolicy: Never
---
# Source: pcaims-app/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-pcaims-app-test-mysql"
  labels:
    helm.sh/chart: pcaims-app-0.1.0
    app.kubernetes.io/name: pcaims-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: mysql-client
      image: mysql:8.0
      command: ['mysql']
      args: ['-h', 'release-name-pcaims-app-mysql', '-u', 'root', '-prootpassword', '-e', 'SELECT 1;']
  restartPolicy: Never
